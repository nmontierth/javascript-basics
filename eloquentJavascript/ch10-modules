Programs grow organically-- new pieces of functionality are continually added as new needs come up. Because of this, structure is 
extremely important. Without structure, one must have knowledge of the system as a whole in order to understand it and make changes 
to it. Modules provide structure to a program. Relationships between modules are referred to as dependencies.

PACKAGES
  A chunk of code that can be distributed (copied and installed). When a problem is found or features are added, packes need to be 
  updated. This requires infrastructure that can keep up with necessary upgrades across multiple packages. NPM provides this 
  infrastructure.
  
  NPM-- two things
    1) an online service to download and upload packages
    2) a program (bundled with Node.js) that helps to install and manage packages
    
  By default-- you own the copyright to any code that you right. However, most packages are published under a license that explicitly 
  allows other people to use it. Some licenses require that you publish any code that is built on top of the package under that same 
  license. BE AWARE OF LICENSES WHEN USING OTHER'S CODE!


MODULE SYSTEM
  Below uses a function constructor to wrap the module's code in a function and use that function's scope as module scope.
      let plusOne = Function("n", "return n + 1;");
      console.log(plusOne(4));

COMMONJS MODULES
  Main piece of CommonJS modules is a function called require. When its called with the module name of a dependency, it loads the 
  module and returns its interface. 
  
  An example of this is below: 
    const ordinal = require("ordinal");
    const {days, months} = require("date-names");
    
    exports.formatDate = function(date, format) {
      return format.replace(/YYYY|M(MMM)?|Do?|dddd/g, tag => {
        if (tag == "YYYY") return date.getFullYear();
        if (tag == "M") return date.getMonth();
        if (tag == "MMMM") return months[date.getMonth()];
        if (tag == "D") return date.getDate();
        if (tag == "Do") return ordinal(date.getDate());
        if (tag == "dddd") return days[date.getDay()];
      });
    }; 
    
  Above makes up a module that contains a formatDate. Because the module stores required dependencies, one does not have to bother 
  calling them when calling the module. Additionally, the module adds this function formatDate to exports so that modules that depend 
  on it can get access to it.
  
  Using this module is done like this:
  
      const {formatDate} = require("./format-date");
      
      console.log(formatDate(new Date(), "MMMM Do, YYYY));
      //-> August 18th, 2021
  
  The function require is defined like this:
    require.cache = Object.create(null);
    
    function require(name) {
      if (!(name in require.cache)){
        let code = readFile(name);
        let module = {exports: {}};
        require.cache[name] = module;
        let wrapper = Function("require, exports, module", code);
        wrapper(require, modules.exports, module);
      }
      return require.cache[name].exports;
    }
    
ECMASCRIPT MODULES
  Introduced in 2015, the notation for calling a module is built in.
      import ordinal from "ordinal";
      import {days, months} from "date-names";
      
      export function formatDate(date, format) {
        return format.replace(/YYYY|M(MMM)?|Do?|dddd/g, tag => {
          if (tag == "YYYY") return date.getFullYear();
          if (tag == "M") return date.getMonth();
          if (tag == "MMMM") return months[date.getMonth()];
          if (tag == "D") return date.getDate();
          if (tag == "Do") return ordinal(date.getDate());
          if (tag == "dddd") return days[date.getDay()];
        });
      };
      
    Default is the module's main exported value. To export a default:
        export default function (x,y) {return x + y;};

    Renaming imported bindings is easy: 
        import {days as dayNames} from "date-names";
  
BUILDING AND BUNDLING
  A project built of multiple different module files presents problems-- the time it takes to fetch these files adds up significantly 
  Because of this, programmers typically use bundlers to combine all these files into one large file to publish to the web. 
  In terms of finding packages-- it's fairly normal to come across packages that have gone through multiple stages of transformations.

MODULE DESIGN
  Good design is subjective and something that you will develop over time.
  --Ease of use. The interface should be simple and predictable.
  --Ease with which something can be composed with other code. The module should not attempt to accomplish super specific goals. This 
  will ensure that it can be applied in other instances that require the same general operations, but differ slightly from the 
  module's initial motivation.
  --IF SOMETHING CAN BE DONE WITH A FUNCTION, USE A FUNCTION. Try best to limit the use of stateful objects.
  --Observe what data structures are used to describe certain things. Designing for composability requires matching data structures 
  when possible.
      
      
      
      
